import * as React from "react";
import ReactDOM from "react-dom/client";

import styles from "./transportTable.module.css";

import {
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from "@tanstack/react-table";

type Transport = {
  cnpj: string;
  razaoSocial: string;
  modalidade: string;
  acoes: string;
};

const defaultData: Transport[] = [
  {
    cnpj: "13.217.485/00001-11",
    razaoSocial: "Empresa Brasileira de Correios e Telégrafos",
    modalidade: "Nenhuma Modalidade",
    acoes: "",
  },
];

const columnHelper = createColumnHelper<Transport>();

const columns = [
  columnHelper.accessor("cnpj", {
    header: () => <span>CNPJ</span>,
    cell: (info) => info.getValue(),
  }),
  columnHelper.accessor((row) => row.razaoSocial, {
    id: "razaoSocial",
    cell: (info) => <i>{info.getValue()}</i>,
    header: () => <span>Razão Social</span>,
  }),
  columnHelper.accessor("modalidade", {
    header: () => "Modalidade de Envio",
    cell: (info) => info.renderValue(),
  }),
  columnHelper.accessor("acoes", {
    header: () => <span>Ações</span>,
  }),
];

export default function TransportTable() {
  const [data, setData] = React.useState(() => [...defaultData]);
  const rerender = React.useReducer(() => ({}), {})[1];

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <div className={styles.p2}>
      <table className={styles.table}>
        <thead className={styles.thead}>
          {table.getHeaderGroups().map((headerGroup) => (
            <tr key={headerGroup.id}>
              {headerGroup.headers.map((header) => (
                <th className={styles.th} key={header.id}>
                  {header.isPlaceholder
                    ? null
                    : flexRender(
                        header.column.columnDef.header,
                        header.getContext()
                      )}
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody className={styles.tbody}>
          {table.getRowModel().rows.map((row) => (
            <tr className={styles.tr} key={row.id}>
              {row.getVisibleCells().map((cell) => (
                <td className={styles.td} key={cell.id}>
                  {flexRender(cell.column.columnDef.cell, cell.getContext())}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
        <tfoot>
          {table.getFooterGroups().map((footerGroup) => (
            <tr key={footerGroup.id}>
              {footerGroup.headers.map((header) => (
                <th key={header.id}>
                  {header.isPlaceholder
                    ? null
                    : flexRender(
                        header.column.columnDef.footer,
                        header.getContext()
                      )}
                </th>
              ))}
            </tr>
          ))}
        </tfoot>
      </table>
      <div className="h-4" />
    </div>
  );
}
